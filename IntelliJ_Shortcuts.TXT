//String rotation checker.
public class StringRotationChecker {
    
    // Function to rotate string left by one position
    public static String rotateLeft(String str) {
        if (str.length() <= 1) return str;
        return str.substring(1) + str.charAt(0);
    }

    // Main function to perform rotation and check first-last match
    public static void main(String[] args) {
        String input = "abac";
        int count = 0;
        String rotated = input;

        for (int i = 0; i < input.length(); i++) {
            // Check if first and last characters match
            if (rotated.charAt(0) == rotated.charAt(rotated.length() - 1)) {
                count++;
            }
            // Rotate string left by one character
            rotated = rotateLeft(rotated);
        }

        System.out.println("Number of times first and last characters matched: " + count);
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//LargestOddSum
public class LargestOddEvenSum {

    public static void main(String[] args) {
        int[] numbers = {3, 12, 7, 8, 5, 10, 21, 2};

        int largestOdd = Integer.MIN_VALUE;
        int largestEven = Integer.MIN_VALUE;

        // Find largest odd and even numbers
        for (int num : numbers) {
            if (num % 2 == 0) {
                if (num > largestEven) {
                    largestEven = num;
                }
            } else {
                if (num > largestOdd) {
                    largestOdd = num;
                }
            }
        }

        // Handle cases where no odd or even number exists
        if (largestOdd == Integer.MIN_VALUE) {
            System.out.println("No odd number found.");
        } else {
            System.out.println("Largest Odd Number: " + largestOdd);
        }

        if (largestEven == Integer.MIN_VALUE) {
            System.out.println("No even number found.");
        } else {
            System.out.println("Largest Even Number: " + largestEven);
        }

        if (largestOdd != Integer.MIN_VALUE && largestEven != Integer.MIN_VALUE) {
            int sum = largestOdd + largestEven;
            System.out.println("Sum of Largest Odd and Even Numbers: " + sum);
        }
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Smallest digit Sumfinder
public class SmallestDigitSumFinder {

    // Function to compute digit sum of a number
    public static int digitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }

    // Main function to process the logic
    public static void main(String[] args) {
        int n = 14;

        // Step 1: Sum of digits
        int sumOfDigits = digitSum(n);

        // Step 2: Double the sum
        int target = sumOfDigits * 2;

        // Step 3: Find the smallest number with digit sum = target
        int result = 1;
        while (true) {
            if (digitSum(result) == target) {
                break;
            }
            result++;
        }

        // Output
        System.out.println("Input number: " + n);
        System.out.println("Sum of digits: " + sumOfDigits);
        System.out.println("Target digit sum: " + target);
        System.out.println("Smallest number with digit sum " + target + " is: " + result);
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Delete words to make even

public class EvenWordSentence {

    public static void main(String[] args) {
        String input = "Java is a powerful and versatile language";
        System.out.println("Original Sentence:");
        System.out.println(input);

        String[] words = input.split("\\s+"); // Split by whitespace

        if (words.length % 2 != 0) {
            // Odd number of words: remove the last word
            StringBuilder evenSentence = new StringBuilder();
            for (int i = 0; i < words.length - 1; i++) {
                evenSentence.append(words[i]).append(" ");
            }
            System.out.println("\nModified Sentence with Even Words:");
            System.out.println(evenSentence.toString().trim());
        } else {
            // Already even
            System.out.println("\nSentence already has even number of words:");
            System.out.println(input);
        }
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Largest sum of 2digit in which first and last digit are same 

public class LargestDigitSumSameEnds {

    // Function to calculate digit sum
    public static int digitSum(int num) {
        return (num / 10) + (num % 10);
    }

    public static void main(String[] args) {
        int maxSum = 0;
        int numberWithMaxSum = 0;

        // Loop through 2-digit numbers where first and last digits are same
        for (int i = 11; i < 100; i += 11) { // 11, 22, ..., 99
            int sum = digitSum(i);
            if (sum > maxSum) {
                maxSum = sum;
                numberWithMaxSum = i;
            }
        }

        // Output
        System.out.println("Number with largest digit sum (first and last digits same): " + numberWithMaxSum);
        System.out.println("Digit sum: " + maxSum);
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
//Bricks
class Solution {
    public int solution(int[] A) {
        int totalBricks = 0;
        for (int bricks : A) {
            totalBricks += bricks;
        }
        int N = A.length;
        if (totalBricks != 10 * N) {
            return -1;
        }
        int moves = 0;
        int currentExcess = 0;
        for (int i = 0; i < N; i++) {
            currentExcess += A[i] - 10;
            moves += Math.abs(currentExcess);
        }
        return moves;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        
        // Test case 1: Example where no moves are needed
        int[] test1 = {10, 10, 10};
        System.out.println("Test 1: " + sol.solution(test1)); // Expected: 0
        
        // Test case 2: Example where moves are needed
        int[] test2 = {11, 10, 9};
        System.out.println("Test 2: " + sol.solution(test2)); // Expected: 2
        
        // Test case 3: Invalid case (total bricks not equal to 10*N)
        int[] test3 = {10, 11, 12};
        System.out.println("Test 3: " + sol.solution(test3)); // Expected: -1
        
        // Test case 4: More complex case
        int[] test4 = {7, 15, 10, 8};
        System.out.println("Test 4: " + sol.solution(test4)); // Expected: 7
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//S and T

class Solution {
    public int solution(String S, String T) {
        if (S.equals(T)) {
            return 0;
        }
        
        int N = S.length();
        int[] diff = new int[N];
        for (int i = 0; i < N; i++) {
            int sDigit = S.charAt(i) - '0';
            int tDigit = T.charAt(i) - '0';
            diff[i] = (tDigit - sDigit + 10) % 10;
        }
        
        int moves = 0;
        for (int i = 0; i < N - 1; i++) {
            int currentDiff = diff[i];
            if (currentDiff == 0) {
                continue;
            }
            moves += currentDiff;
            diff[i + 1] = (diff[i + 1] + currentDiff) % 10;
        }
        
        if (diff[N - 1] != 0) {
            return -1;
        }
        
        return moves;
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
//Players moves lrft , right  and Grpah
public class Solution {
    public int solution(String S) {
        char[] players = S.toCharArray();
        int n = players.length;
        int count = 0;
        
        for (int i = 0; i < n; i++) {
            boolean canMove = true;
            char move = players[i];
            
            if (move == '>') {
                if (i + 1 < n && players[i + 1] != ' ') {
                    canMove = false;
                }
            } else if (move == '<') {
                if (i - 1 >= 0 && players[i - 1] != ' ') {
                    canMove = false;
                }
            } else if (move == '^' || move == 'v') {
                // Assuming vertical moves are not blocked unless specified otherwise
                // Since the problem focuses on horizontal moves, these might always succeed
                canMove = true;
            }
            
            if (canMove) {
                count++;
            }
        }
        
        return count;
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//The conssuctive words

public class Solution {
    public int solution(String S) {
        if (S.length() < 3) {
            return 0;
        }
        
        int totalMoves = 0;
        int i = 0;
        int n = S.length();
        
        while (i < n) {
            char currentChar = S.charAt(i);
            int j = i + 1;
            while (j < n && S.charAt(j) == currentChar) {
                j++;
            }
            int length = j - i;
            if (length >= 3) {
                totalMoves += length / 3;
            }
            i = j;
        }
        
        return totalMoves;
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Replace 5 k times
 
public class Solution {
    public String solution(String S, int K) {
        if (S == null || S.length() == 0) return "IMPOSSIBLE";

        char[] chars = S.toCharArray();
        int n = chars.length;

        // Count digits not equal to 5
        int notFiveCount = 0;
        for (char c : chars) {
            if (c != '5') notFiveCount++;
        }

        // If we cannot make exactly K changes
        if (K > notFiveCount) return "IMPOSSIBLE";

        // Make changes greedily from left to right for max value
        for (int i = 0; i < n && K > 0; i++) {
            if (chars[i] != '5') {
                chars[i] = '5';
                K--;
            }
        }

        return new String(chars);
    }

    // Example main method to run tests
    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.solution("165232", 3)); // Expected: 565552
        System.out.println(sol.solution("123", 2));     // Expected: 553
        System.out.println(sol.solution("555", 0));     // Expected: 555
        System.out.println(sol.solution("555", 1));     // Expected: IMPOSSIBLE
        System.out.println(sol.solution("", 0));        // Expected: IMPOSSIBLE
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Given two arrays A and B consisting of N integers each. Index k is named fair if four sums A[0]+.......
This mail has been sent from an external source. Do not reply to it, or open any links/attachments unless you are sure of the sender's identity.

 
public class Solution {
    public int solution(int[] A, int[] B) {
        int N = A.length;
        if (N != B.length || N < 2) return 0;

        long totalSumA = 0, totalSumB = 0;
        for (int i = 0; i < N; i++) {
            totalSumA += A[i];
            totalSumB += B[i];
        }

        int fairCount = 0;
        long leftSumA = 0, leftSumB = 0;

        for (int K = 1; K < N; K++) {
            leftSumA += A[K - 1];
            leftSumB += B[K - 1];

            long rightSumA = totalSumA - leftSumA;
            long rightSumB = totalSumB - leftSumB;

            if (leftSumA == rightSumA && leftSumB == rightSumB && leftSumA == leftSumB) {
                fairCount++;
            }
        }

        return fairCount;
    }

    // Main method for testing
    public static void main(String[] args) {
        Solution sol = new Solution();

        System.out.println(sol.solution(new int[]{0, 4, -1, 0, 3}, new int[]{0, -2, 5, 0, 3})); // 2
        System.out.println(sol.solution(new int[]{2, -2, -3, 3}, new int[]{0, 0, 4, -4}));     // 1
        System.out.println(sol.solution(new int[]{4, -1, 0, 3}, new int[]{-2, 6, 0, 4}));       // 0
        System.out.println(sol.solution(new int[]{3, 2, 6}, new int[]{4, 1, 6}));              // 0
        System.out.println(sol.solution(new int[]{1, 4, 2, -2, 5}, new int[]{7, -2, -2, 2, 5}));// 2
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Square or not

This mail has been sent from an external source. Do not reply to it, or open any links/attachments unless you are sure of the sender's identity.

 
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public boolean solution(int[] X, int[] Y) {
        int N = X.length;
        if (N < 4) return false; // Minimum 4 points needed to form a square's perimeter

        int minX = Integer.MAX_VALUE, maxX = Integer.MIN_VALUE;
        int minY = Integer.MAX_VALUE, maxY = Integer.MIN_VALUE;

        Set<String> pointSet = new HashSet<>();

        // Identify bounding square and store all points in a set
        for (int i = 0; i < N; i++) {
            minX = Math.min(minX, X[i]);
            maxX = Math.max(maxX, X[i]);
            minY = Math.min(minY, Y[i]);
            maxY = Math.max(maxY, Y[i]);
            pointSet.add(X[i] + "," + Y[i]);
        }

        // Check if it forms a square
        if (maxX - minX != maxY - minY) return false;

        for (int i = 0; i < N; i++) {
            int x = X[i], y = Y[i];

            // Point must lie on square perimeter: either on horizontal or vertical boundary
            boolean onVerticalEdge = (x == minX || x == maxX) && (y >= minY && y <= maxY);
            boolean onHorizontalEdge = (y == minY || y == maxY) && (x >= minX && x <= maxX);

            if (!onVerticalEdge && !onHorizontalEdge) return false;
        }

        return true;
    }

    // Main method for testing
    public static void main(String[] args) {
        Solution sol = new Solution();

        System.out.println(sol.solution(new int[]{-1, 1, -1}, new int[]{2, 1, 0}));         // true
        System.out.println(sol.solution(new int[]{-10, -10, -9}, new int[]{-10, 10, 5}));   // true
        System.out.println(sol.solution(new int[]{-1, 1, 1, -1, 0}, new int[]{1, 1, -1, -1, 0})); // false
        System.out.println(sol.solution(new int[]{-1, 1, -2, 2, -2, 2}, new int[]{1, -1, -1, 1, 1, -1})); // false
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Non negative no v in a binary form
class Solution {
    public int solution(String S) {
        if (S == null || S.isEmpty()) return 0;
        
        // Find the first '1' to ignore leading zeros
        int firstOne = 0;
        while (firstOne < S.length() && S.charAt(firstOne) == '0') {
            firstOne++;
        }
        
        // If all zeros, return 0
        if (firstOne == S.length()) return 0;
        
        int operations = 0;
        // For each bit after firstOne
        for (int i = S.length() - 1; i > firstOne; i--) {
            if (S.charAt(i) == '1') {
                operations += 2; // 1 for the add, 1 for the carry
            } else {
                operations += 1; // just the shift
            }
        }
        
        // The first '1' contributes 1 operation plus all the shifts to reach it
        operations += 1;
        
        return operations;
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//Minimum move to adjust R with M
import java.util.*;

public class MinSwapsForR {
    public static int minSwapsToGroupR(String s) {
        List<Integer> rPositions = new ArrayList<>();
        
        // Step 1: Collect positions of all 'R'
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'R') {
                rPositions.add(i);
            }
        }
        
        int rCount = rPositions.size();
        if (rCount <= 1) return 0; // Nothing to swap if 0 or 1 'R'
        
        // Step 2: Group 'R's around the median position
        int medianIndex = rCount / 2;
        int medianPos = rPositions.get(medianIndex);
        
        int minSwaps = 0;
        // Calculate swaps needed to bring all 'R's to contiguous positions
        for (int i = 0; i < rCount; i++) {
            // Ideal position in contiguous block centered at the median
            int targetPos = medianPos - medianIndex + i;
            minSwaps += Math.abs(rPositions.get(i) - targetPos);
        }
        
        return minSwaps;
    }

    public static void main(String[] args) {
        System.out.println(minSwapsToGroupR("MRRM"));    // Output: 2
        System.out.println(minSwapsToGroupR("RMRM"));    // Output: 2
        System.out.println(minSwapsToGroupR("MMRMMRMM"));// Output: 4
        System.out.println(minSwapsToGroupR("RRRR"));    // Output: 0
        System.out.println(minSwapsToGroupR("MMM"));     // Output: 0
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//If N=14, take a sum of all digit=5. Then double this sum 10. Now final smallest element whose sum equal to 10 answer 19

This mail has been sent from an external source. Do not reply to it, or open any links/attachments unless you are sure of the sender's identity.

 
public class SmallestDigitSum {
    public static int getSmallestNumber(int N) {
        // Step 1: Sum the digits of N
        int digitSum = 0;
        int temp = N;
        while (temp > 0) {
            digitSum += temp % 10;
            temp /= 10;
        }
        
        // Step 2: Subtract 5 and then double the digit sum
        int targetSum = (digitSum - 5) * 2;
        
        // Step 3: Find the smallest number whose digit sum equals targetSum
        int result = 1;
        while (true) {
            int sum = 0;
            int t = result;
            while (t > 0) {
                sum += t % 10;
                t /= 10;
            }
            if (sum == targetSum) {
                return result;
            }
            result++;
        }
    }

    public static void main(String[] args) {
        int n = 14;
        int result = getSmallestNumber(n);
        System.out.println("Result: " + result); // Output: 19
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//a for b or b for a without thre consecutive letters
This mail has been sent from an external source. Do not reply to it, or open any links/attachments unless you are sure of the sender's identity.

 
public class Main {
    public static int getMinMoves(String s) {
        if (s.length() < 3) return 0; // No moves needed for strings shorter than 3
        
        char[] chars = s.toCharArray();
        int moves = 0;
        
        for (int i = 0; i <= chars.length - 3; i++) {
            // Check for three consecutive same characters
            if (chars[i] == chars[i+1] && chars[i] == chars[i+2]) {
                // Replace the middle character (optimal strategy)
                chars[i+1] = (chars[i] == 'a') ? 'b' : 'a';
                moves++;
                // Skip the next character as we've already handled it
                i += 1;
            }
        }
        
        return moves;
    }

    public static void main(String[] args) {
        System.out.println(getMinMoves("aaab"));    // Output: 1
        System.out.println(getMinMoves("baaab"));   // Output: 1
        System.out.println(getMinMoves("aaaaa"));   // Output: 2
        System.out.println(getMinMoves("ababab"));  // Output: 0
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//finding the smallest number of moves required to make all elements in an array pairwise distinct, where each element is within the range [1, 3] and can be incremented by //1 in each m

This mail has been sent from an external source. Do not reply to it, or open any links/attachments unless you are sure of the sender's identity.

 
import java.util.Arrays;

public class MinMovesForDistinctElements {
    public static int solution(int[] A) {
        Arrays.sort(A); // Sort the array to easily check adjacent elements
        int moves = 0;
        
        for (int i = 1; i < A.length; i++) {
            if (A[i] <= A[i-1]) {
                // Calculate the required increment to make A[i] > A[i-1]
                int required = A[i-1] + 1 - A[i];
                moves += required;
                A[i] += required;
                
                // Ensure the element doesn't exceed the maximum allowed value (3)
                if (A[i] > 3) {
                    return -1; // Impossible to make distinct within [1,3]
                }
            }
        }
        
        return moves;
    }

    public static void main(String[] args) {
        System.out.println(solution(new int[]{1, 2, 2}));      // Output: 1 (change last 2 to 3)
        System.out.println(solution(new int[]{1, 1, 2}));      // Output: 2 (change second 1 to 2, third to 3)
        System.out.println(solution(new int[]{2, 2, 2}));      // Output: 3 (change to 2,3,4 but 4>3 → -1)
        System.out.println(solution(new int[]{1, 2, 3}));      // Output: 0 (already distinct)
        System.out.println(solution(new int[]{1, 1, 1, 1}));  // Output: -1 (impossible within [1,3])
    }
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//S=(A...AB...B) by deleting some elements S=BAABAB)-> 2, BBABAA->3 (delete)
public int Soltion(string S){
Int n=S.length();
if(n<=1){return 0}
int minDeletions=n;
for(int i=0;i<=n;i++){
int deletion=0;
String SubA=S.Substring(0,i);
String SubB=S.Substring(i,n);
for(int j=0;J<SubA.length();J++){
if(SubA.charAT(J)=='B'){
deletions++;
}
}
for(int J=0;J<SubB.length();J++){
if(SubB.charAT(j)=='A'){
deletions++;}}
minDeletions=Math.min(minDeletions,deletions);
return minDeletions;
}}}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//In One move you can increase or decarese vlaue of Any element by 1.after Each move all no should remain in range (1....N)   (1,2,3)----0, (1,2,1)->2

public int solution(int [] A){
int n=A.length;
Arrays.sort(A);
long moves=0;
for(int i=0;i<n;i++){
int target=i+1;
moves+=Math.abs(A[i]-target);
if(moves>1_000_000_000){
return-1;}
retrun(int) moves;}
public static void main(String[] args){
solution Sol=new Solution();
System.out.println(Sol.solution(new int[]{1,2,1}));
System.out.println(Sol.solution(new int[]{2,1,4,4}));
System.out.println(Sol.solution(new int[]{6,2,3,5,6,3}));
System.out.println(Sol.solution(new int[]{1,1,1,1,1,1}));
System.out.println(Sol.solution(new int[]{5,4,3,2,1}));
}
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//Next Digit Sum intput->28 out->137 input->734 output->743 input->1990 output->2089
private static int digitSum(int number){
int Sum=0;
while(number>0){
Sum+=number%10;
number/=10; }
return sum;}
public static int nextdigitnumberwithsamedigitsum(int N){
int targetsum=digitSum(N);
int M=N+1;
while(digitSum(M)!=targetSum){
M++;}
return M;}
public static void main(String [] args){
System.out.println(nextdigitnumberwithsamedigitsum(N:28));
System.out.println(nextdigitnumberwithsamedigitsum(N:734));
System.out.println(nextdigitnumberwithsamedigitsum(N:1990));
System.out.println(nextdigitnumberwithsamedigitsum(N:1000));
}}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//First and LAst digit same->Add.....130,191,200,10->140    405,45,300,300->600   30,909,3190,99,3990,9009->9918

public static int maxSum(int () A){
Map<String int[]> map=new HAshMap<>();
int result=-1;
for(*int num:A){int first=getFiristDigit(num);
int last=num%10;
String Key=first+"-"+last;
int[] topTwo=Map.getorDefault(Key,new int[]{-1,-1});
if(num>topTwo[0]) {
topTwo[1]=topTwo[0];
topTwo[0]=num;}
else if(num>topTwo[1]){
topTwo[1]=num;
}

Map.put(Key,topTwo);}
for(int[] topTwo:Map.Values()){
if(topTwo[1]!=-1){
result=Math.Max(result,topTwo[0]+topTwo[1])}}
return result;}
private static int getFiristDigit(int num){
while(num>=10){num/=10;}
return num;}
public static vouid main(String [] args){

int []A1={130,191,200,10};
int []A2={450,45,300,300};
int []A3={50,222,49,52,25};
int []A4={30,909,3190,99,3910,900};
System.out.println(A1);
System.out.println(A2);
System.out.println(A3);
System.out.println(A4);


